#!/usr/bin/env bash

set -e

PROJECT_DIR=$(pwd)
DEV_COMPOSE="docker compose -f ${PROJECT_DIR}/docker/common.yml -f ${PROJECT_DIR}/docker/dev.yml --env-file=${PROJECT_DIR}/dev-scripts/env.base --env-file=${PROJECT_DIR}/dev-scripts/env.dev"
DEV_SUPERUSER_PASSWORD="devpass"
PROJECT_TEMPLATE_DIR="$HOME/projects/project_template"

source ${PROJECT_DIR}/.env
source ${PROJECT_DIR}/dev-scripts/env.base
source ${PROJECT_DIR}/dev-scripts/env.dev

if [ $1 = "django" ]; then
  $DEV_COMPOSE run --rm django python manage.py "${@:2}"
elif [ $1 = "sh" ]; then
  $DEV_COMPOSE exec $2 bash
elif [ $1 = "test" ]; then
  $DEV_COMPOSE run --rm django pytest
elif [ $1 = "format" ]; then
  $DEV_COMPOSE run --rm django sh -c 'isort . && black .'
elif [ $1 = "tmux" ]; then
  ./dev-scripts/tmux_dev.sh
elif [ $1 = "devsuperuser" ]; then
  $DEV_COMPOSE run --rm django sh -c "export DJANGO_SUPERUSER_PASSWORD='devpass' && python manage.py createsuperuser --noinput --username $2 --email $2@$2.com"
elif [ $1 = "buildtest" ]; then
    docker build . --file=dev-scripts/Dockerfile.playwright --tag $PROJECT_NAME-playwright
elif [ $1 = "runtest" ]; then
    docker run -it --rm --hostname=$PROJECT_NAME-tests --name=$PROJECT_NAME-tests -v .:/app/src --ipc=host --network=$PROJECT_NAME $PROJECT_NAME-playwright npx playwright test
elif [ $1 = "generatetypes" ]; then
    $DEV_COMPOSE exec nextjs npx -y openapi-typescript@7.4.1 http://django:8000/api/openapi.json --output api/apiTypes.ts
elif [ $1 = "deploystage" ]; then
    ${PROJECT_DIR}/dev-scripts/deploy.sh ${PROJECT_DIR}/dev-scripts/env.stage
elif [ $1 = "deployprod" ]; then
    ${PROJECT_DIR}/dev-scripts/deploy.sh ${PROJECT_DIR}/dev-scripts/env.prod
elif [ $1 = "djangoprod" ]; then
    source ${PROJECT_DIR}/dev-scripts/env.prod
    ssh root@$PROJECT_DOMAIN "cd /app/$PROJECT_NAME && ./manage_prod.sh ${@:2}"
elif [ $1 = "logsprod" ]; then
    source ${PROJECT_DIR}/dev-scripts/env.prod
    ssh root@$PROJECT_DOMAIN "docker service logs ${PROJECT_NAME}_${2}"
elif [ $1 = "gencerts" ]; then
    ${PROJECT_DIR}/dev-scripts/generate_certs.sh ${PROJECT_NAME} ${PROJECT_DOMAIN}
    sudo security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain ${PROJECT_DIR}/dev-scripts/ssl/${PROJECT_NAME}.crt
elif [ $1 = "initinfra" ]; then
    source ${PROJECT_DIR}/dev-scripts/env.prod
    python3 ${PROJECT_DIR}/dev-scripts/do_init.py
elif [ $1 = "initprod" ]; then
    source ${PROJECT_DIR}/dev-scripts/env.prod
    ${PROJECT_DIR}/dev-scripts/production_setup.sh $PROJECT_DOMAIN
elif [ $1 = "updatetemplate" ]; then
    source ${PROJECT_DIR}/dev-scripts/env.prod
    $PROJECT_TEMPLATE_DIR/update_template.sh -t django_nextjs_template -n $PROJECT_NAME -r $PROJECT_DIR -d $PROJECT_DOMAIN
elif [ $1 = "updatesubmodules" ]; then
    git submodule init
    git submodule update --remote
else
  $DEV_COMPOSE $@
fi
