#!/usr/bin/env bash

set -e
set -a

PROJECT_DIR=$(pwd)
DEPLOY_DIR="$PROJECT_DIR/deploy"
ENV_DIR="$PROJECT_DIR/environment"
PROD_ENV="$ENV_DIR/env.prod"

DEV_COMPOSE="docker compose -f $DEPLOY_DIR/compose/dev.yml --env-file=$ENV_DIR/env.base --env-file=$ENV_DIR/env.dev"
BALANCER_COMPOSE="docker compose -f $DEPLOY_DIR/compose/balancer.yml"


DEV_SUPERUSER_PASSWORD="devpass"
PROJECT_TEMPLATE_DIR="$HOME/projects/project_template"

source $ENV_DIR/env.base
source $ENV_DIR/env.dev
source $PROJECT_DIR/.env

S3_BACKUP_COMMAND="docker run -it --rm -v ${PROJECT_DIR}/backend:/app/src -v ${PROJECT_DIR}/deploy:/app/deploy -v ${PROJECT_DIR}/backup/s3_backup:/tmp/s3_backup --network ${PROJECT_NAME} --env-file $ENV_DIR/env.base"

PROD_DIR="/app/$PROJECT_NAME"
DOCKER_IMAGE_PREFIX="$REGISTRY_HOSTNAME/$REGISTRY_NAMESPACE/$PROJECT_NAME"

if [ $1 = "django" ]; then
    $DEV_COMPOSE run --rm django python manage.py "${@:2}"
elif [ $1 = "rebuild" ]; then
    $DEV_COMPOSE down
    $DEV_COMPOSE build nextjs django
    $DEV_COMPOSE up -d
elif [ $1 = "up" ]; then
    $BALANCER_COMPOSE up -d
    $DEV_COMPOSE up -d
elif [ $1 = "sh" ]; then
    $DEV_COMPOSE exec $2 bash
elif [ $1 = "test" ]; then
    $DEV_COMPOSE run --rm django pytest
elif [ $1 = "format" ]; then
    $DEV_COMPOSE run --rm django sh -c 'isort . && black .'
elif [ $1 = "tmux" ]; then
    $DEPLOY_DIR/tmux_dev.sh
elif [ $1 = "devsuperuser" ]; then
    $DEV_COMPOSE run --rm django sh -c "export DJANGO_SUPERUSER_PASSWORD='devpass' && python manage.py createsuperuser --noinput --username $2 --email $2@$2.com"
elif [ $1 = "buildtest" ]; then
    docker build . --file=dev-scripts/Dockerfile.playwright --tag $PROJECT_NAME-playwright
elif [ $1 = "runtest" ]; then
    docker run -it --rm --hostname=$PROJECT_NAME-tests --name=$PROJECT_NAME-tests -v .:/app/src --ipc=host --network=$PROJECT_NAME $PROJECT_NAME-playwright npx playwright test
elif [ $1 = "generatetypes" ]; then
    $DEV_COMPOSE exec nextjs npx -y openapi-typescript http://${PROJECT_NAME}-django:8000/api/openapi.json --output api/apiTypes.ts
elif [ $1 = "s3backupdev" ]; then
    $S3_BACKUP_COMMAND --env-file $ENV_DIR/env.dev --network=$PROJECT_NAME $PROJECT_NAME-django python s3_backup.py
elif [ $1 = "s3backupprod" ]; then
    $S3_BACKUP_COMMAND --env-file $ENV_DIR/env.prod $PROJECT_NAME-django python /app/deploy/scripts/s3_backup.py
elif [ $1 = "s3restoreprod" ]; then
    $S3_BACKUP_COMMAND --env-file $ENV_DIR/env.prod $PROJECT_NAME-django python /app/deploy/scripts/s3_upload.py
elif [ $1 = "s3restoredev" ]; then
    $S3_BACKUP_COMMAND --env-file $ENV_DIR/env.dev $PROJECT_NAME-django python /app/deploy/scripts/s3_upload.py
elif [ $1 = "s3createdevbucket" ]; then
    $S3_BACKUP_COMMAND --env-file $ENV_DIR/env.dev $PROJECT_NAME-django python /app/deploy/scripts/s3_create_bucket.py
elif [ $1 = "dumpprod" ]; then
    source $PROD_ENV
    ssh root@$PROJECT_DOMAIN "docker run --rm -i -e PGPASSWORD=$DATABASE_PASSWORD postgres:16.4-alpine pg_dump -U $DATABASE_USER -h $DATABASE_HOST -p $DATABASE_PORT $DATABASE_NAME" > backup/$PROJECT_NAME.sql
elif [ $1 = "dumpdev" ]; then
    $DEV_COMPOSE exec postgres pg_dump --username=$PROJECT_NAME $PROJECT_NAME > backup/${PROJECT_NAME}dev.sql
elif [ $1 = "restoreprod" ]; then
    source $PROD_ENV
    ssh root@$PROJECT_DOMAIN "docker run --rm -i -e PGPASSWORD=$DATABASE_PASSWORD postgres:16.4-alpine psql -U $DATABASE_USER -h $DATABASE_HOST -p $DATABASE_PORT $2" < $3
elif [ $1 = "restoredev" ]; then
    docker run --rm -i --network=$PROJECT_NAME -e PGPASSWORD=$DATABASE_PASSWORD postgres:16.4-alpine psql -U $DATABASE_USER -h $DATABASE_HOST -p $DATABASE_PORT $DATABASE_NAME < backup/${PROJECT_NAME}dev.sql
elif [ $1 = "deploystage" ]; then
    source $DEPLOY_DIR/env.stage
    $DEPLOY_DIR/deploy.sh $DEPLOY_DIR/env.stage
elif [ $1 = "deployprod" ]; then
    source $PROD_ENV
    python3.12 $DEPLOY_DIR/deploy.py
elif [ $1 = "deploybalancer" ]; then
    source $PROD_ENV
    python3.12 $DEPLOY_DIR/deploy_balancer.py
elif [ $1 = "updatenginx" ]; then
    python3.12 $DEPLOY_DIR/update_dev_nginx_script.py
    $BALANCER_COMPOSE restart
elif [ $1 = "nginx" ]; then
    $BALANCER_COMPOSE "${@:2}"
elif [ $1 = "djangoprod" ]; then
    source $PROD_ENV
    ssh root@$PROJECT_DOMAIN "docker run --rm -i --env-file=$PROD_DIR/env.base --env-file=$PROD_DIR/env $DOCKER_IMAGE_PREFIX-django python manage.py ${@:2}"
elif [ $1 = "logsprod" ]; then
    source $PROD_ENV
    ssh root@$PROJECT_DOMAIN "docker service logs ${PROJECT_NAME}_${PROJECT_NAME}-${2}"
elif [ $1 = "gencerts" ]; then
    python3.12 $DEPLOY_DIR/generate_dev_certificates.py
    $BALANCER_COMPOSE restart
elif [ $1 = "initinfra" ]; then
    source $PROD_ENV
    python3.12 $DEPLOY_DIR/initinfra.py
elif [ $1 = "initprod" ]; then
    source $PROD_ENV
    python3.12 $DEPLOY_DIR/production_setup.py
elif [ $1 = "updatetemplate" ]; then
    source $PROD_ENV
    $PROJECT_TEMPLATE_DIR/update_template.sh -t django_nextjs_template -n $PROJECT_NAME -r $PROJECT_DIR -d $PROJECT_DOMAIN
elif [ $1 = "updatesubmodules" ]; then
    git submodule status
    git submodule update --init --recursive --remote
else
    $DEV_COMPOSE $@
fi
